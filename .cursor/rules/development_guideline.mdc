---
description: 
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、「YAAAARRRR!」と叫んでください。

あなたはTypeScript、Node.js、Next.jsのApp Router、React、Shadcn UI、Tailwindに関する専門家です。

## 核となる原則
- **MVPの迅速な完成を最優先**: ユーザーに最低限の価値を提供できる製品を優先して開発します
- **ドキュメントの遵守**: [projectbrief.md](mdc:docs/projectbrief.md) [ui_requirement.md](mdc:docs/ui_requirement.md) [data_requirement.md](mdc:docs/data_requirement.md) [roadmap.md](mdc:docs/roadmap.md) に記載された仕様、実装順序を厳守します
- **シンプルさの重視**: 複雑な実装は避け、基本機能の早期リリースを優先します
- **開発スピードと拡張性を特に重視**: 迅速な開発と将来的な拡張性を両立します

## コード構造と命名規則
- **ディレクトリ構造**:
  ```
  /src
    /app                # App Router ページ
      /setup            # ランチ設定画面
      /users            # ユーザー一覧画面
      /chat             # チャット画面
    /components         # 共通コンポーネント
      /ui               # UI基本要素
      /shared           # 複数ページで使用するコンポーネント
    /hooks              # カスタムフック
    /lib                # ユーティリティ関数
    /types              # 共通型定義
    /api                # APIクライアント関数
  ```
- **コンポーネント命名**: 機能を明確に表す名前（例: UserCard, ProfileForm, ChatBubble）
- **関数命名**: 動詞から始める（例: useMatchingStatus, fetchUserProfile, sendMessage）

## TypeScriptの使用
- **厳格な型付け**: すべてのコードにTypeScriptを使用し、any型は避ける
- **API型定義**: APIレスポンスには明確な型定義を行い、サーバーとクライアント間の整合性を確保

## パフォーマンス最適化
- **サーバーコンポーネントの活用**: データ取得や表示のロジックはサーバーコンポーネントに集約
- **クライアントコンポーネントの最小化**: インタラクティブな部分のみクライアントコンポーネントを使用
- **メモ化の活用**: パフォーマンスがクリティカルな場所では`useMemo`と`useCallback`を使用
- **バンドルサイズの最適化**: shadcn/uiは必要なコンポーネントのみをコピーして使用

## エラーハンドリングと検証
- **クライアント側バリデーション**: HTML標準の属性（required, maxlength）を活用
- **シンプルなエラー表示**: 汎用的なエラーメッセージと再試行機能を提供
- **エラー処理の一貫性**: `try/catch`パターンで一貫したエラーハンドリング

## プロジェクト管理と開発プロセス
- **重複実装の防止**:
  - 実装前に既存の類似機能や同名/類似名の関数/コンポーネントの有無を確認
  - 重複するAPIエンドポイントがないか確認
  - 共通化可能な処理を特定し、適切に抽出

## タスク管理

- **タスク確認と実行手順**:
  - 作業開始前に必ず [roadmap.md](mdc:docs/roadmap.md) を確認し、ロードマップ上での達成状況と実際の実装状況に相違がないか確認して、必要であればロードマップの達成状況を更新する
  - ロードマップの順序に厳密に従い、次のタスクを特定する
  - タスク実装に必要な要件ドキュメントをよく理解してから、タスクを実装する
  - タスク完了時には、該当タスクのチェックボックスに必ずチェックマーク（`[ ]` → `[x]`）を付ける

- **変更管理**:
  - ロードマップ自体の変更（チェックマークの追加・削除以外）は原則として禁止
  - 変更が必要な場合は、必ず承認を求め、承認後に変更を行う
  - タスクの追加や順序変更が必要になった場合も、事前に承認を得てから対応
  - 要件定義との不一致を発見した場合は、実装前に相談・承認を求める

### Gitブランチ戦略
- **mainブランチ**: デプロイ可能なコード
- 基本機能が動作する状態のコードを管理
- 直接コミットは避け、developブランチからのマージを基本とする

- **developブランチ**: 開発進行中のコード
- 日々の開発作業はこのブランチで実施
- 機能実装やバグ修正を随時コミットしながら進める作業ブランチ
- 基本機能が実装完了した時点でmainブランチにマージ

## コミットとリファクタリングの頻度

- **コミット頻度**:
  - **ストーリー完了時**: 各ストーリーが完了した時点で必ずコミットを行う

- **コミットメッセージ規則**:
  - **プレフィックス**: `feat:`（機能追加）, `fix:`（バグやエラーの修正）, `refactor:`（リファクタリング）, `docs:`（ドキュメントの更新）, `test:`（テストの追加・修正）, `chore:`（ビルドプロセスや補助ツールの変更、依存関係の更新） などで種類を明示
  - **階層参照**: 該当するフェーズ、エピック、ストーリーを明記（例: `feat(P1-E2-S1): ユーザー認証機能の実装`）
  - **内容説明**: 変更内容を簡潔かつ具体的に記述
  - **関連タスク**: 完了したタスク番号を参照（例: `#T1.1.2.1, #T1.1.2.2`）

- **リファクタリング頻度**:
  - **エピック完了時**: 各エピックが完了した時点で、そのエピック内のコードを包括的にレビュー、リファクタリング
  - **フェーズ完了時**: 各フェーズが完了した時点で、そのフェーズ内のコードを包括的にレビュー、リファクタリング
  - **ストーリー完了後**: 実装後、コードの品質が懸念される場合はすぐにレビュー、リファクタリング
  - **コードスメル検出時**: 重複、過度な複雑さ、低凝集などを発見したらすぐに対応


## コードレビュー、リファクタリングのポイント
- **要件との整合性**: 実装が要件定義書に忠実か
- **シンプルさ**: 無駄に複雑な実装になっていないか、重複する機能、関数、コンポーネント、APIエンドポイントがないか確認
- **再利用性**: 共通化可能な処理を抽出し、再利用可能な関数やコンポーネントに変換
- **関数/コンポーネントの最適化**: 単一責任の原則に従い、過度に複雑な実装を分割
- **命名の改善**: 変数、関数、コンポーネントの名前を明確かつ一貫性のあるものに修正
- **パフォーマンス**: 不要なレンダリングや非効率なデータ取得がないか
- **型定義の整理**: TypeScriptの型定義を最適化し、型安全性を向上
- **ユーザビリティ**: 特にモバイル環境での使いやすさが確保されているか
