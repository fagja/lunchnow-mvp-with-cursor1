---
description: Development Guideline
globs: 
alwaysApply: false
---
あなたはTypeScript、Node.js、Next.jsのApp Router、React、Shadcn UI、Tailwindに関する専門家です。

## 核となる原則
- **MVPの迅速な完成を最優先**: ユーザーに最低限の価値を提供できる製品を優先して開発します
- **要件定義の遵守**: [projectbrief.md](mdc:docs/projectbrief.md) [ui_requirement.md](mdc:docs/ui_requirement.md) [data_requirement.md](mdc:docs/data_requirement.md) に記載された仕様を厳守します
- **シンプルさの重視**: 複雑な実装は避け、基本機能の早期リリースを優先します
- **開発スピードと拡張性を特に重視**: 迅速な開発と将来的な拡張性を両立します


## コード構造と命名規則
- **ディレクトリ構造**:
  ```
  /src
    /app                # App Router ページ
      /setup            # ランチ設定画面
      /users            # ユーザー一覧画面
      /chat             # チャット画面
    /components         # 共通コンポーネント
      /ui               # UI基本要素
      /shared           # 複数ページで使用するコンポーネント
    /hooks              # カスタムフック
    /lib                # ユーティリティ関数
    /types              # 共通型定義
    /api                # APIクライアント関数
  ```
- **コンポーネント命名**: 機能を明確に表す名前（例: UserCard, ProfileForm, ChatBubble）
- **関数命名**: 動詞から始める（例: useMatchingStatus, fetchUserProfile, sendMessage）

## TypeScriptの使用
- **厳格な型付け**: すべてのコードにTypeScriptを使用し、any型は避ける
- **API型定義**: APIレスポンスには明確な型定義を行い、サーバーとクライアント間の整合性を確保

## パフォーマンス最適化
- **サーバーコンポーネントの活用**: データ取得や表示のロジックはサーバーコンポーネントに集約
- **クライアントコンポーネントの最小化**: インタラクティブな部分のみクライアントコンポーネントを使用
- **メモ化の活用**: パフォーマンスがクリティカルな場所では`useMemo`と`useCallback`を使用
- **バンドルサイズの最適化**: shadcn/uiは必要なコンポーネントのみをコピーして使用

## エラーハンドリングと検証
- **クライアント側バリデーション**: HTML標準の属性（required, maxlength）を活用
- **シンプルなエラー表示**: 汎用的なエラーメッセージと再試行機能を提供
- **エラー処理の一貫性**: `try/catch`パターンで一貫したエラーハンドリング

### Gitブランチ戦略
- **mainブランチ**: デプロイ可能なコード
- 基本機能が動作する状態のコードを管理
- 直接コミットは避け、developブランチからのマージを基本とする

- **developブランチ**: 開発進行中のコード
- 日々の開発作業はこのブランチで実施
- 機能実装やバグ修正を随時コミットしながら進める作業ブランチ
- 基本機能が実装完了した時点でmainブランチにマージ

## プロジェクト管理と開発プロセス
- **重複実装の防止**:
  - 実装前に既存の類似機能や同名/類似名の関数/コンポーネントの有無を確認
  - 重複するAPIエンドポイントがないか確認
  - 共通化可能な処理を特定し、適切に抽出

- **タスク管理**:
  - タスク完了毎にロードマップドキュメント [roadmap.md](mdc:docs/roadmap.md) を更新
  - 各機能の実装状況を明確に記録

- **継続的リファクタリング**:
  - 機能実装ごとにリファクタリングを行う
  - コードの重複、複雑性、パフォーマンスの問題を定期的に検証

- **優先順位の遵守**:
  - MVPで定義された機能を優先的に実装
  - 追加機能はMVP完成後に検討

## コードレビューのポイント
- **要件との整合性**: 実装が要件定義書に忠実か
- **シンプルさ**: 無駄に複雑な実装になっていないか
- **再利用性**: 共通コンポーネントが適切に活用されているか
- **パフォーマンス**: 不要なレンダリングや非効率なデータ取得がないか
- **ユーザビリティ**: 特にモバイル環境での使いやすさが確保されているか

## MVPの技術的目標
- 基本機能（登録、ランチ設定、ユーザー一覧、マッチング、チャット）の完全実装
- 20分のタイムアウトによるゴーストユーザー対策の実装
- 画面間の遷移とデータフローの確立
- 最小限のエラーハンドリングと回復機能
- モバイルファーストのレスポンシブUI
